// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  avatar    String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  subscriptions Subscription[]
  notifications Notification[]
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     String
  excerpt     String?
  category    String
  tags        String[]
  status      Status    @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  author   User      @relation(fields: [authorId], references: [id])
  authorId String
  comments Comment[]
  likes    Like[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author   User      @relation(fields: [authorId], references: [id])
  authorId String
  post     Post      @relation(fields: [postId], references: [id])
  postId   String
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId String?
  replies  Comment[] @relation("CommentReplies")
  likes    Like[]
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

model Subscription {
  id               String             @id @default(cuid())
  type             SubscriptionType
  targetId         String
  notificationType NotificationType
  frequency        FrequencyType
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Notification {
  id         String           @id @default(cuid())
  type       NotificationType
  sourceId   String
  sourceType SourceType
  read       Boolean          @default(false)
  createdAt  DateTime        @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

enum Role {
  ADMIN
  USER
}

enum Status {
  DRAFT
  PUBLISHED
}

enum SubscriptionType {
  AUTHOR
  CATEGORY
  TAG
}

enum NotificationType {
  COMMENT_REPLY
  MENTION
  NEW_FOLLOWER
  POST_LIKE
  COMMENT_LIKE
  NEW_POST
}

enum FrequencyType {
  INSTANT
  DAILY
  WEEKLY
}

enum SourceType {
  POST
  COMMENT
  USER
}
